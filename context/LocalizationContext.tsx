import React, { createContext, useContext, useEffect, useMemo, useCallback, useState, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';

export type LanguageCode = 'en' | 'si' | 'ta';

type TranslationDictionary = {
  [key: string]: string | TranslationDictionary;
};

type TranslationParams = Record<string, string | number>;

interface LocalizationContextValue {
  language: LanguageCode;
  setLanguage: (code: LanguageCode) => Promise<void>;
  t: (key: string, params?: TranslationParams) => string;
  availableLanguages: { code: LanguageCode; labelKey: string }[];
  translateForLanguage: (code: LanguageCode, key: string, params?: TranslationParams) => string;
}

const STORAGE_KEY = 'preferred_language';

const availableLanguages: { code: LanguageCode; labelKey: string }[] = [
  { code: 'en', labelKey: 'languages.en' },
  { code: 'si', labelKey: 'languages.si' },
  { code: 'ta', labelKey: 'languages.ta' },
];

const translations: Record<LanguageCode, TranslationDictionary> = {
  en: {
    languages: {
      en: 'English',
      si: 'Sinhala',
      ta: 'Tamil',
    },
    common: {
      cancel: 'Cancel',
      confirm: 'Confirm',
      close: 'Close',
    },
    settings: {
      title: 'Settings',
      sections: {
        account: 'Account',
        sos: 'SOS Emergency',
        app: 'App Settings',
        about: 'About & Support',
      },
      items: {
        viewProfile: 'View & Edit Profile',
        changePassword: 'Change Password',
        emergencyContacts: 'Emergency Contacts',
        emergencyContactsValue: '{{count}} contacts added',
        sosSettings: 'SOS Settings',
        sosHistory: 'SOS History',
        shareBloodType: 'Share Blood Type',
        shareMedicalConditions: 'Share Medical Conditions',
        shareMedications: 'Share Medications',
        notifications: 'Notifications',
  notificationsSummaryAll: 'All alerts enabled',
  notificationsSummarySome: '{{count}} alerts enabled',
  notificationsSummaryNone: 'No alerts enabled',
        darkMode: 'Dark Mode',
        locationServices: 'Location Services',
        language: 'Language',
        languageModalTitle: 'Choose your language',
        languageUpdated: 'Language updated to {{language}}',
  languageUpdateError: 'Unable to update language. Please try again.',
        helpSupport: 'Help & Support',
        privacyPolicy: 'Privacy Policy',
        terms: 'Terms of Service',
        about: 'About ClimateReady',
        version: 'Version {{version}}',
      },
      signOut: 'Sign Out',
      languageNames: {
        en: 'English',
        si: 'Sinhala',
        ta: 'Tamil',
      },
      notificationPreferences: {
        title: 'Alert Preferences',
        description: 'Choose which weather alerts you want to receive.',
        helper: 'These choices apply to push notifications and the in-app alert list.',
        hazards: {
          rain: {
            title: 'Heavy rain alerts',
            description: 'Get notified when rainfall is expected to exceed your threshold.',
          },
          wind: {
            title: 'High wind alerts',
            description: 'Stay informed about strong winds that could affect safety.',
          },
          'temp-high': {
            title: 'High temperature alerts',
            description: 'Know when heat levels are forecast to reach risky levels.',
          },
          'temp-low': {
            title: 'Low temperature alerts',
            description: 'Receive updates when cold snaps are expected.',
          },
        },
        actions: {
          selectAll: 'Enable all',
          deselectAll: 'Disable all',
          save: 'Save preferences',
        },
        feedback: {
          saved: 'Alert preferences updated',
          noneSelected: 'Select at least one alert to stay informed.',
          error: 'Unable to save preferences. Please try again.',
        },
      },
    },
    home: {
      subtitle: 'Stay prepared, stay safe',
      sections: {
        alerts: 'Active Alerts',
        quickActions: 'Quick Actions',
        progress: 'Your Progress',
      },
      greetings: {
        morning: 'Good Morning üåÖ',
        afternoon: 'Good Afternoon ‚òÄÔ∏è',
        evening: 'Good Evening üåô',
      },
      quickActions: {
        safeZones: {
          title: 'Safe Zones',
          subtitle: 'Find nearby shelters',
        },
        toolkit: {
          title: 'Toolkit',
          subtitle: 'Emergency checklists',
        },
        community: {
          title: 'Community',
          subtitle: 'Connect with others',
        },
        mockAlerts: {
          title: 'Mock Alerts',
          subtitle: 'Test alert notifications',
        },
      },
      weather: {
        loading: 'Getting weather data...',
        unavailableTitle: 'Weather Unavailable',
        unavailableDescription: 'Unable to fetch weather data',
        permissionDenied: 'Permission to access location was denied',
        unableToGetLocation: 'Unable to get location',
        humidity: 'üíß {{humidity}}%',
        wind: 'üí® {{wind}} m/s',
      },
      alerts: {
        multipleHazards: 'Weather Alert',
        titles: {
          rain: 'Heavy Rain Forecast',
          wind: 'High Wind Forecast',
          tempHigh: 'High Temperature Forecast',
          tempLow: 'Low Temperature Forecast',
        },
        descriptions: {
          rain: 'Heavy rain ~ {{value}}mm/3h (‚â• {{threshold}}mm)',
          wind: 'High wind {{value}} m/s (‚â• {{threshold}} m/s)',
          tempHigh: 'High temp {{value}}¬∞C (‚â• {{threshold}}¬∞C)',
          tempLow: 'Low temp {{value}}¬∞C (‚â§ {{threshold}}¬∞C)',
        },
        notificationFallback: 'Upcoming weather conditions exceed your thresholds.',
      },
      progress: {
        preparedness: 'Preparedness',
        preparednessSubtitle: '{{completed}}/{{total}} tasks',
        learning: 'Learning',
        learningSubtitle: '{{completed}}/{{total}} modules',
        trainingGame: 'Training Game',
        trainingSubtitle: '{{victories}} wins ‚Ä¢ {{games}} games',
        badges: 'Badges',
        badgesSubtitle: '{{count}} earned',
      },
      hero: {
        title: 'Stay Prepared, Stay Safe',
        subtitle: 'Your comprehensive emergency preparedness companion',
      },
    },
  },
  si: {
    languages: {
      en: '‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í',
      si: '‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω',
      ta: '‡∂Ø‡∑ô‡∂∏‡∑Ö',
    },
    common: {
      cancel: '‡∂â‡∑Ä‡∂≠‡∑ä‡∑Ä‡∂±‡∑ä‡∂±',
      confirm: '‡∂≠‡∑Ñ‡∑Ä‡∑î‡∂ª‡∑î ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
      close: '‡∑Ä‡∑É‡∂±‡∑ä‡∂±',
    },
    settings: {
      title: '‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä',
      sections: {
        account: '‡∂ú‡∑í‡∂´‡∑î‡∂∏',
        sos: 'SOS ‡∑Ñ‡∂Ø‡∑í‡∑É‡∑í',
        app: '‡∂∫‡∑ô‡∂Ø‡∑î‡∂∏‡∑ä ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä',
        about: '‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∑Ñ‡∑è ‡∑É‡∑Ñ‡∑è‡∂∫',
      },
      items: {
        viewProfile: '‡∂¥‡∑ê‡∂≠‡∑í‡∂ö‡∂© ‡∂∂‡∂Ω‡∂±‡∑ä‡∂± ‡∑Ñ‡∑è ‡∑É‡∂Ç‡∑É‡∑ä‡∂ö‡∂ª‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
        changePassword: '‡∂∏‡∑î‡∂ª‡∂¥‡∂Ø‡∂∫ ‡∑Ä‡∑ô‡∂±‡∑É‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
        emergencyContacts: '‡∑Ñ‡∂Ø‡∑í‡∑É‡∑í ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è',
        emergencyContactsValue: '‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞‡∂≠‡∑è {{count}}‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂ö‡∂ª ‡∂á‡∂≠',
        sosSettings: 'SOS ‡∑É‡∑ê‡∂ö‡∑É‡∑ì‡∂∏‡∑ä',
        sosHistory: 'SOS ‡∂â‡∂≠‡∑í‡∑Ñ‡∑è‡∑É‡∂∫',
        shareBloodType: '‡∂Ω‡∑ö ‡∑Ä‡∂ª‡∑ä‡∂ú‡∂∫ ‡∂∂‡∑ô‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂±',
        shareMedicalConditions: '‡∑Ä‡∑õ‡∂Ø‡∑ä‚Äç‡∂∫ ‡∂≠‡∂≠‡∑ä‡∑Ä ‡∂∂‡∑ô‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂±',
        shareMedications: '‡∂ñ‡∑Ç‡∂∞ ‡∂≠‡∑ú‡∂ª‡∂≠‡∑î‡∂ª‡∑î ‡∂∂‡∑ô‡∂Ø‡∑è‡∂ú‡∂±‡∑ä‡∂±',
        notifications: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä',
  notificationsSummaryAll: '‡∑É‡∑í‡∂∫‡∂Ω‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂∫‡∑í',
  notificationsSummarySome: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä {{count}}‡∂ö‡∑ä ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∂∫‡∑í',
  notificationsSummaryNone: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª ‡∂±‡∑ê‡∂≠',
        darkMode: '‡∂Ö‡∂≥‡∑î‡∂ª‡∑î ‡∂≠‡∑ì‡∂ª‡∑î',
        locationServices: '‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑É‡∑ö‡∑Ä‡∑è',
        language: '‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä',
        languageModalTitle: '‡∂î‡∂∂‡∂ú‡∑ö ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±',
        languageUpdated: '{{language}} ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä‡∂ß ‡∂∏‡∑è‡∂ª‡∑î ‡∑Ä‡∑í‡∂∫',
  languageUpdateError: '‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω ‡∂ö‡∑Ö ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.',
        helpSupport: '‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∑É‡∑Ñ ‡∑É‡∑Ñ‡∑è‡∂∫',
        privacyPolicy: '‡∂¥‡∑î‡∂Ø‡∑ä‡∂ú‡∂Ω‡∂≠‡∑ä‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂¥‡∂≠‡∑ä‡∂≠‡∑í‡∂∫',
        terms: '‡∑É‡∑ö‡∑Ä‡∑è ‡∂ö‡∑ú‡∂±‡∑ä‡∂Ø‡∑ö‡∑É‡∑í',
        about: 'ClimateReady ‡∂ú‡∑ê‡∂±',
        version: '‡∂¥‡∑í‡∂ß‡∂¥‡∂≠‡∑ä {{version}}',
      },
      signOut: '‡∑Ä‡∑í‡∑É‡∑ä‡∑É‡∂±‡∑ä‡∂±',
      languageNames: {
        en: '‡∂â‡∂Ç‡∂ú‡∑ä‚Äç‡∂ª‡∑ì‡∑É‡∑í',
        si: '‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω',
        ta: '‡∂Ø‡∑ô‡∂∏‡∑Ö',
      },
      notificationPreferences: {
        title: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠',
        description: '‡∂î‡∂∂‡∂ß ‡∂Ω‡∑ê‡∂∂‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ê‡∂∏‡∂≠‡∑í ‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∂≠‡∑ù‡∂ª‡∂±‡∑ä‡∂±.',
        helper: '‡∂∏‡∑ô‡∂∏ ‡∂≠‡∑ö‡∂ª‡∑ì‡∂∏‡∑ä ‡∂≠‡∂Ω‡∑ä‡∂Ω‡∑î ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∑É‡∑Ñ ‡∂∫‡∑ô‡∂Ø‡∑î‡∂∏‡∑ö ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä ‡∂Ø‡∑ê‡∂ö‡∑ä‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂Ø‡∑ô‡∂ö‡∂ß‡∂∏ ‡∂∂‡∂Ω‡∂¥‡∑è‡∂∫‡∑í.',
        hazards: {
          rain: {
            title: '‡∂∂‡∂ª ‡∑Ä‡∑ê‡∑É‡∑í ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä',
            description: '‡∑Ä‡∑ê‡∑É‡∑í ‡∂¥‡∑ä‚Äç‡∂ª‡∂∏‡∑è‡∂´‡∂∫ ‡∂î‡∂∂‡∑ö ‡∑É‡∑ì‡∂∏‡∑è‡∑Ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑î‡∑Ä‡∑Ñ‡∑ú‡∂≠‡∑ä ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±.',
          },
          wind: {
            title: '‡∂ã‡∑É‡∑É‡∑ä ‡∑É‡∑î‡∑Ö‡∂Ç ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä',
            description: '‡∂∂‡∂Ω‡∑Ä‡∂≠‡∑ä ‡∑É‡∑î‡∑Ö‡∂Ç ‡∂Ö‡∑Ä‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∂∏‡∂ß‡∑ä‡∂ß‡∂∏‡∑ä ‡∂ú‡∑ê‡∂± ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±.',
          },
          'temp-high': {
            title: '‡∂ã‡∂´‡∑î‡∑É‡∑î‡∂∏‡∑ä ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä',
            description: '‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä‡∂∫ ‡∂Ö‡∑Ä‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∂∏‡∂ß‡∑ä‡∂ß‡∂∏‡∑ä ‡∑Ä‡∑ô‡∂≠ ‡∑Ö‡∂ü‡∑è‡∑Ä‡∂± ‡∑Ä‡∑í‡∂ß ‡∂Ø‡∑ê‡∂±‡∑î‡∑Ä‡∂≠‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±.',
          },
          'temp-low': {
            title: '‡∂Ö‡∂©‡∑î ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä',
            description: '‡∑É‡∑í‡∑É‡∑í‡∂Ω‡∂ß ‡∑Ñ‡∑î‡∂Ø‡∂ö‡∂Ω‡∑è ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫‡∂±‡∑ä ‡∂¥‡∑ô‡∂ª ‡∂Ø‡∑ê‡∂±‡∂ú‡∂±‡∑ä‡∂±.',
          },
        },
        actions: {
          selectAll: '‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
          deselectAll: '‡∑É‡∑í‡∂∫‡∂Ω‡∑ä‡∂Ω ‡∂Ö‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±',
          save: '‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠ ‡∑É‡∑î‡∂ª‡∂ö‡∑í‡∂±‡∑ä‡∂±',
        },
        feedback: {
          saved: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠ ‡∂∫‡∑è‡∑Ä‡∂≠‡∑ä‡∂ö‡∑è‡∂Ω ‡∑Ä‡∑í‡∂∫',
          noneSelected: '‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑è‡∑Ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂Ö‡∑Ä‡∂∏ ‡∑Ä‡∑Å‡∂∫‡∑ô‡∂±‡∑ä ‡∂ë‡∂ö‡∑ä ‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∂ö‡∑ä‡∑Ä‡∂≠‡∑ä ‡∑É‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.',
          error: '‡∂ö‡∑ê‡∂∏‡∑ê‡∂≠‡∑ä‡∂≠ ‡∑É‡∑î‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫. ‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.',
        },
      },
    },
    home: {
      subtitle: '‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±, ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠‡∑Ä ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±',
      sections: {
        alerts: '‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∑Å‡∑ì‡∂Ω‡∑ì ‡∂Ö‡∂±‡∂≠‡∑î‡∂ª‡∑î ‡∂á‡∂ü‡∑Ä‡∑ì‡∂∏‡∑ä',
        quickActions: '‡∑Ä‡∑ö‡∂ú‡∑Ä‡∂≠‡∑ä ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂∏‡∑è‡∂ª‡∑ä‡∂ú',
        progress: '‡∂î‡∂∂‡∂ú‡∑ö ‡∂¥‡∑ä‚Äç‡∂ª‡∂ú‡∂≠‡∑í‡∂∫',
      },
      greetings: {
        morning: '‡∑É‡∑î‡∂∑ ‡∂ã‡∂Ø‡∑ë‡∑É‡∂±‡∂ö‡∑ä üåÖ',
        afternoon: '‡∑É‡∑î‡∂∑ ‡∂∏‡∂∞‡∑ä‚Äç‡∂∫‡∑Ñ‡∑ä‡∂± ‡∑Ä‡∑ö‡∂Ω‡∑è‡∑Ä‡∂ö‡∑ä ‚òÄÔ∏è',
        evening: '‡∑É‡∑î‡∂∑ ‡∑É‡∑ê‡∂±‡∑ä‡∂Ø‡∑ë‡∑Ä‡∂ö‡∑ä üåô',
      },
      quickActions: {
        safeZones: {
          title: '‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠ ‡∂¥‡∑ä‚Äç‡∂ª‡∂Ø‡∑ö‡∑Å',
          subtitle: '‡∂Ü‡∑É‡∂±‡∑ä‡∂± ‡∂ª‡∑ê‡∑É‡∑Ä‡∂Ω ‡∑Ä‡∑è‡∑É‡∑É‡∑ä‡∂Ø‡∂±‡∑ä',
        },
        toolkit: {
          title: '‡∂∏‡∑ô‡∑Ä‡∂Ω‡∂∏‡∑ä ‡∂ö‡∂ß‡∑ä‡∂ß‡∂Ω‡∂∫',
          subtitle: '‡∑Ñ‡∂Ø‡∑í‡∑É‡∑í ‡∂Ω‡∑ê‡∂∫‡∑í‡∑É‡∑ä‡∂≠‡∑î',
        },
        community: {
          title: '‡∂¥‡∑ä‚Äç‡∂ª‡∂¢‡∑è‡∑Ä',
          subtitle: '‡∂Ö‡∂±‡∑ô‡∂ö‡∑î‡∂≠‡∑ä ‡∂Ö‡∂∫ ‡∑É‡∂∏‡∂ü ‡∑É‡∂∏‡∑ä‡∂∂‡∂±‡∑ä‡∂∞ ‡∑Ä‡∂±‡∑ä‡∂±',
        },
        mockAlerts: {
          title: '‡∂Ö‡∂∑‡∑ä‚Äç‡∂∫‡∑è‡∑É ‡∂Ö‡∂±‡∂≠‡∑î‡∂ª‡∑î',
          subtitle: '‡∂Ø‡∑ê‡∂±‡∑î‡∂∏‡∑ä‡∂Ø‡∑ì‡∂∏‡∑ä ‡∂¥‡∑í‡∂ª‡∑í‡∂ö‡∑ä‡∑É‡∂±‡∑ä‡∂±',
        },
      },
      weather: {
        loading: '‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è‡∂ú‡∂±‡∑í‡∂∏‡∑í‡∂±‡∑ä...',
        unavailableTitle: '‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´‡∂∫ ‡∂Ω‡∂∂‡∑è‡∂ú‡∂≠ ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö',
        unavailableDescription: '‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂Ø‡∂≠‡∑ä‡∂≠ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫',
        permissionDenied: '‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫‡∂ß ‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑ö‡∑Å ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂Ö‡∑Ä‡∑É‡∂ª ‡∂±‡∑ú‡∂Ω‡∑ê‡∂∂‡∑ì‡∂∫',
        unableToGetLocation: '‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫ ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö‡∑í ‡∑Ä‡∑í‡∂∫',
        humidity: 'üíß ‡∂Ü‡∂ª‡∑ä‡∂Ø‡∑ä‚Äç‡∂ª‡∂≠‡∑è‡∑Ä {{humidity}}%',
        wind: 'üí® ‡∑É‡∑î‡∑Ö‡∂Ç {{wind}} m/s',
      },
      alerts: {
        multipleHazards: '‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂Ö‡∂±‡∂≠‡∑î‡∂ª‡∑î ‡∂á‡∂ü‡∑Ä‡∑ì‡∂∏',
        titles: {
          rain: '‡∂â‡∑Ñ‡∑Ö ‡¥Æ‡¥¥ ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í',
          wind: '‡∂â‡∑Ñ‡∑Ö ‡∑É‡∑î‡∑Ö‡∂Ç ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í',
          tempHigh: '‡∂â‡∑Ñ‡∑Ö ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í',
          tempLow: '‡∂Ö‡∂©‡∑î ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä ‡∂Ö‡∂±‡∑è‡∑Ä‡∑ê‡∂ö‡∑í',
        },
        descriptions: {
          rain: '‡∂â‡∑Ñ‡∑Ö ‡∑Ä‡∑ê‡∑É‡∑í ~ {{value}}mm/3h (‚â• {{threshold}}mm)',
          wind: '‡∂â‡∑Ñ‡∑Ö ‡∑É‡∑î‡∑Ö‡∂Ç {{value}} m/s (‚â• {{threshold}} m/s)',
          tempHigh: '‡∂â‡∑Ñ‡∑Ö ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä {{value}}¬∞C (‚â• {{threshold}}¬∞C)',
          tempLow: '‡∂Ö‡∂©‡∑î ‡∂ã‡∑Ç‡∑ä‡∂´‡∂≠‡∑ä‡∑Ä {{value}}¬∞C (‚â§ {{threshold}}¬∞C)',
        },
        notificationFallback: '‡∂â‡∂Ø‡∑í‡∂ª‡∑í ‡∂ö‡∑è‡∂Ω‡∂ú‡∑î‡∂´ ‡∂≠‡∂≠‡∑ä‡∂≠‡∑ä‡∑Ä‡∂∫‡∂±‡∑ä ‡∂î‡∂∂‡∑ö ‡∂≠‡∑ì‡∂ª‡∑î ‡∂±‡∑í‡∂∫‡∂∏‡∂∫‡∂±‡∑ä ‡∂â‡∂ö‡∑ä‡∂∏‡∑Ä‡∂∫‡∑í.',
      },
      progress: {
        preparedness: '‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∂∂‡∑Ä',
        preparednessSubtitle: '‡∂ö‡∑è‡∂ª‡∑ä‡∂∫‡∂∫‡∂±‡∑ä {{completed}}/{{total}}',
        learning: '‡∂â‡∂ú‡∑ô‡∂±‡∑ì‡∂∏',
        learningSubtitle: '‡∂∏‡∑ú‡∂©‡∑í‡∂∫‡∑î‡∂Ω {{completed}}/{{total}}',
        trainingGame: '‡∂¥‡∑î‡∑Ñ‡∑î‡∂´‡∑î ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è‡∑Ä',
        trainingSubtitle: '‡∂ä‡∂ß {{victories}} ‡∂¢‡∂∫‡∂ú‡∑ä‚Äç‡∂ª‡∑Ñ‡∂´ ‚Ä¢ ‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂©‡∑è {{games}}',
        badges: '‡∂∂‡∑ê‡∂¢‡∑ä',
        badgesSubtitle: '‡∂Ω‡∂∑‡∑è‡∂ú‡∂≠‡∑ä {{count}}',
      },
      hero: {
        title: '‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑Ä‡∂±‡∑ä‡∂±, ‡∂Ü‡∂ª‡∂ö‡∑ä‡∑Ç‡∑í‡∂≠‡∑Ä ‡∑É‡∑í‡∂ß‡∑í‡∂±‡∑ä‡∂±',
        subtitle: '‡∂î‡∂∂‡∂ú‡∑ö ‡∑É‡∂∏‡∑ä‡∂¥‡∑ñ‡∂ª‡∑ä‡∂´ ‡∑Ñ‡∂Ø‡∑í‡∑É‡∑í ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä ‡∑É‡∑Ñ‡∑è‡∂∫',
      },
    },
  },
  ta: {
    languages: {
      en: '‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç',
      si: '‡Æö‡Æø‡Æô‡Øç‡Æï‡Æ≥‡ÆÆ‡Øç',
      ta: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
    },
    common: {
      cancel: '‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç',
      confirm: '‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ',
      close: '‡ÆÆ‡ØÇ‡Æü‡ØÅ',
    },
    settings: {
      title: '‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
      sections: {
        account: '‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ',
        sos: 'SOS ‡ÆÖ‡Æµ‡Æö‡Æ∞‡ÆÆ‡Øç',
        app: '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
        about: '‡Æ§‡Æï‡Æµ‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ‡ÆÆ‡Øç',
      },
      items: {
        viewProfile: '‡Æö‡ØÅ‡ÆØ‡Æµ‡Æø‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç',
        changePassword: '‡Æï‡Æü‡Æµ‡ØÅ‡Æö‡Øç‡Æö‡Øä‡Æ≤‡Øç ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ',
        emergencyContacts: '‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
        emergencyContactsValue: '{{count}} ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ©',
        sosSettings: 'SOS ‡ÆÖ‡ÆÆ‡Øà‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
        sosHistory: 'SOS ‡Æµ‡Æ∞‡Æ≤‡Ææ‡Æ±‡ØÅ',
        shareBloodType: '‡Æá‡Æ∞‡Æ§‡Øç‡Æ§ ‡Æµ‡Æï‡Øà‡ÆØ‡Øà ‡Æ™‡Æï‡Æø‡Æ∞‡Øç',
        shareMedicalConditions: '‡ÆÆ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æµ ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡Æ™‡Æï‡Æø‡Æ∞‡Øç',
        shareMedications: '‡ÆÆ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øà ‡Æ™‡Æï‡Æø‡Æ∞‡Øç',
        notifications: '‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç',
  notificationsSummaryAll: '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡ØÅ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡ØÅ‡ÆÆ‡Øç ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ',
  notificationsSummarySome: '{{count}} ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡ØÅ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ',
  notificationsSummaryNone: '‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
        darkMode: '‡Æá‡Æ∞‡ØÅ‡Æ≥‡Øç ‡Æ™‡ÆØ‡Æ©‡Øç‡ÆÆ‡ØÅ‡Æ±‡Øà',
        locationServices: '‡Æá‡Æü ‡Æö‡Øá‡Æµ‡Øà‡Æï‡Æ≥‡Øç',
        language: '‡ÆÆ‡Øä‡Æ¥‡Æø',
        languageModalTitle: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
        languageUpdated: '{{language}} ‡ÆÆ‡Øä‡Æ¥‡Æø‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Ææ‡Æ±‡Øç‡Æ±‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ',
  languageUpdateError: '‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ™‡Øç ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        helpSupport: '‡Æâ‡Æ§‡Æµ‡Æø & ‡ÆÜ‡Æ§‡Æ∞‡Æµ‡ØÅ',
        privacyPolicy: '‡Æ§‡Æ©‡Æø‡ÆØ‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Øà',
        terms: '‡Æö‡Øá‡Æµ‡Øà ‡Æµ‡Æø‡Æ§‡Æø‡ÆÆ‡ØÅ‡Æ±‡Øà‡Æï‡Æ≥‡Øç',
        about: 'ClimateReady ‡Æ™‡Æ±‡Øç‡Æ±‡Æø',
        version: '‡Æ™‡Æ§‡Æø‡Æ™‡Øç‡Æ™‡ØÅ {{version}}',
      },
      signOut: '‡Æµ‡ØÜ‡Æ≥‡Æø‡ÆØ‡Øá‡Æ±‡ØÅ',
      languageNames: {
        en: '‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ÆÆ‡Øç',
        si: '‡Æö‡Æø‡Æô‡Øç‡Æï‡Æ≥‡ÆÆ‡Øç',
        ta: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
      },
      notificationPreferences: {
        title: '‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç',
        description: '‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡ØÜ‡Æ± ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        helper: '‡Æá‡Æ®‡Øç‡Æ§‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç push ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡ÆØ‡Æø‡Æ©‡Øç ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡ÆÆ‡Øç.',
        hazards: {
          rain: {
            title: '‡Æ§‡ØÄ‡Æµ‡Æø‡Æ∞ ‡ÆÆ‡Æ¥‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
            description: '‡ÆÆ‡Æ¥‡Øà ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Øà ‡ÆÆ‡ØÄ‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
          },
          wind: {
            title: '‡ÆÖ‡Æ§‡Æø‡Æï ‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
            description: '‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Øà ‡Æ™‡Ææ‡Æ§‡Æø‡Æï‡Øç‡Æï‡Æï‡Øç‡Æï‡ØÇ‡Æü‡Æø‡ÆØ ‡Æ™‡Æ≤‡ÆÆ‡Ææ‡Æ© ‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø‡Æ§‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡Æ±‡Æø‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
          },
          'temp-high': {
            title: '‡ÆÖ‡Æ§‡Æø‡Æï ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
            description: '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç ‡ÆÜ‡Æ™‡Æ§‡Øç‡Æ§‡Ææ‡Æ© ‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà ‡ÆÖ‡Æü‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
          },
          'temp-low': {
            title: '‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
            description: '‡Æï‡ØÅ‡Æ≥‡Æø‡Æ∞‡Øç ‡ÆÖ‡Æ§‡Æø‡Æï‡Æ∞‡Æø‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æï‡ØÇ‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Øá ‡Æâ‡Æ£‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
          },
        },
        actions: {
          selectAll: '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
          deselectAll: '‡ÆÖ‡Æ©‡Øà‡Æ§‡Øç‡Æ§‡Øà‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡Æü‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
          save: '‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
        },
        feedback: {
          saved: '‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Øç ‡Æ™‡ØÅ‡Æ§‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ',
          noneSelected: '‡Æ§‡Æï‡Æµ‡Æ≤‡Æ±‡Æø‡Æ®‡Øç‡Æ§‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§‡Æ™‡Æü‡Øç‡Æö‡ÆÆ‡Øç ‡Æí‡Æ∞‡ØÅ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Øà ‡Æá‡ÆØ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
          error: '‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡ØÅ‡Æ∞‡Æø‡ÆÆ‡Øà‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Øá‡ÆÆ‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.',
        },
      },
    },
    home: {
      subtitle: '‡Æ§‡ÆØ‡Ææ‡Æ∞‡Øç ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
      sections: {
        alerts: '‡Æö‡ØÜ‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øç',
        quickActions: '‡Æµ‡Æø‡Æ∞‡Øà‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Æ≤‡Øç‡Æï‡Æ≥‡Øç',
        progress: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Øá‡Æ±‡Øç‡Æ±‡ÆÆ‡Øç',
      },
      greetings: {
        morning: '‡Æï‡Ææ‡Æ≤‡Øà ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç üåÖ',
        afternoon: '‡ÆÆ‡Æ§‡Æø‡ÆØ ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç ‚òÄÔ∏è',
        evening: '‡ÆÆ‡Ææ‡Æ≤‡Øà ‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç üåô',
      },
      quickActions: {
        safeZones: {
          title: '‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÆ‡Æ£‡Øç‡Æü‡Æ≤‡ÆÆ‡Øç',
          subtitle: '‡ÆÖ‡Æ∞‡ØÅ‡Æï‡Æø‡Æ≤‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æ§‡Æô‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç',
        },
        toolkit: {
          title: '‡Æï‡Æ∞‡ØÅ‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÜ‡Æü‡Øç‡Æü‡Æø',
          subtitle: '‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡Øç',
        },
        community: {
          title: '‡Æö‡ÆÆ‡ØÇ‡Æï‡ÆÆ‡Øç',
          subtitle: '‡ÆÆ‡Æ±‡Øç‡Æ±‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æü‡Æ©‡Øç ‡Æá‡Æ£‡Øà‡Æï',
        },
        mockAlerts: {
          title: '‡Æ™‡Ææ‡Æö‡Æø‡Æü‡Øç ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà',
          subtitle: '‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà‡Æö‡Øç ‡Æö‡Øã‡Æ§‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç',
        },
      },
      weather: {
        loading: '‡Æï‡Ææ‡Æ≤‡Æ®‡Æø‡Æ≤‡Øà ‡Æ§‡Æ∞‡Æµ‡Øà‡Æ™‡Øç ‡Æ™‡ØÜ‡Æ±‡ØÅ‡Æï‡Æø‡Æ±‡Æ§‡ØÅ...',
        unavailableTitle: '‡Æï‡Ææ‡Æ≤‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Øà ‡Æ™‡ØÜ‡Æ± ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
        unavailableDescription: '‡Æï‡Ææ‡Æ≤‡Æ®‡Æø‡Æ≤‡Øà ‡Æ§‡Æ∞‡Æµ‡Øà‡Æï‡Øç ‡Æï‡ØÜ‡Ææ‡Æ£‡Øç‡Æü‡ØÅ‡Æµ‡Æ∞ ‡Æá‡ÆØ‡Æ≤‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
        permissionDenied: '‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æü ‡ÆÖ‡Æ£‡ØÅ‡Æï‡Æ≤‡Øç ‡ÆÖ‡Æ©‡ØÅ‡ÆÆ‡Æ§‡Æø ‡ÆÆ‡Æ±‡ØÅ‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ',
        unableToGetLocation: '‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æø‡Æü‡Æ§‡Øç‡Æ§‡Øà ‡Æ™‡ØÜ‡Æ± ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà',
        humidity: 'üíß ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç {{humidity}}%',
        wind: 'üí® ‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ {{wind}} m/s',
      },
      alerts: {
        multipleHazards: '‡Æï‡Ææ‡Æ≤‡Æ®‡Æø‡Æ≤‡Øà ‡Æé‡Æö‡Øç‡Æö‡Æ∞‡Æø‡Æï‡Øç‡Æï‡Øà',
        titles: {
          rain: '‡Æï‡Æ© ‡ÆÆ‡Æ¥‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
          wind: '‡Æ§‡ØÄ‡Æµ‡Æø‡Æ∞ ‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡ØÅ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
          tempHigh: '‡ÆÖ‡Æ§‡Æø‡Æï ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
          tempLow: '‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™ ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
        },
        descriptions: {
          rain: '‡Æï‡Æ© ‡ÆÆ‡Æ¥‡Øà ~ {{value}}mm/3h (‚â• {{threshold}}mm)',
          wind: '‡Æï‡Ææ‡Æ±‡Øç‡Æ±‡Æø‡Æ©‡Øç ‡Æµ‡Øá‡Æï‡ÆÆ‡Øç {{value}} m/s (‚â• {{threshold}} m/s)',
          tempHigh: '‡ÆÖ‡Æ§‡Æø‡Æï ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç {{value}}¬∞C (‚â• {{threshold}}¬∞C)',
          tempLow: '‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§ ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡ÆÆ‡Øç {{value}}¬∞C (‚â§ {{threshold}}¬∞C)',
        },
        notificationFallback: '‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æï‡Ææ‡Æ≤‡Æ®‡Æø‡Æ≤‡Øà ‡Æ®‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æ∞‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øà ‡ÆÆ‡ØÄ‡Æ±‡ØÅ‡Æï‡Æø‡Æ©‡Øç‡Æ±‡Æ©.',
      },
      progress: {
        preparedness: '‡Æ§‡ÆØ‡Ææ‡Æ∞‡Øç‡Æ®‡Æø‡Æ≤‡Øà',
        preparednessSubtitle: '‡Æ™‡Æ£‡Æø‡Æï‡Æ≥‡Øç {{completed}}/{{total}}',
        learning: '‡Æï‡Æ±‡Øç‡Æ±‡Æ≤‡Øç',
        learningSubtitle: '‡Æ§‡Øä‡Æï‡ØÅ‡Æ§‡Æø‡Æï‡Æ≥‡Øç {{completed}}/{{total}}',
        trainingGame: '‡Æ™‡ÆØ‡Æø‡Æ±‡Øç‡Æö‡Æø ‡Æµ‡Æø‡Æ≥‡Øà‡ÆØ‡Ææ‡Æü‡Øç‡Æü‡ØÅ',
        trainingSubtitle: '{{victories}} ‡Æµ‡ØÜ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Æ≥‡Øç ‚Ä¢ {{games}} ‡Æµ‡Æø‡Æ≥‡Øà‡ÆØ‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æ≥‡Øç',
        badges: '‡Æ™‡Æü‡Øç‡Æü‡Øà‡Æï‡Æ≥‡Øç',
        badgesSubtitle: '{{count}} ‡Æ™‡ØÜ‡Æ±‡Øç‡Æ±‡Æ§‡ØÅ',
      },
      hero: {
        title: '‡Æ§‡ÆØ‡Ææ‡Æ∞‡Øç ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ™‡Ææ‡Æ§‡ØÅ‡Æï‡Ææ‡Æ™‡Øç‡Æ™‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
        subtitle: '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÅ‡Æ¥‡ØÅ‡ÆÆ‡Øà‡ÆØ‡Ææ‡Æ© ‡ÆÖ‡Æµ‡Æö‡Æ∞ ‡Æ§‡ÆØ‡Ææ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡ØÅ‡Æ£‡Øà',
      },
    },
  },
};

const LocalizationContext = createContext<LocalizationContextValue | undefined>(undefined);

export function LocalizationProvider({ children }: { children: ReactNode }) {
  const [language, setLanguageState] = useState<LanguageCode>('en');

  useEffect(() => {
    const loadLanguage = async () => {
      const stored = await AsyncStorage.getItem(STORAGE_KEY);
      if (stored === 'si' || stored === 'ta' || stored === 'en') {
        setLanguageState(stored);
      }
    };

    loadLanguage();
  }, []);

  const persistLanguage = useCallback(async (code: LanguageCode) => {
    setLanguageState(code);
    await AsyncStorage.setItem(STORAGE_KEY, code);
  }, []);

  const getTranslation = useCallback(
    (lang: LanguageCode, key: string): string | TranslationDictionary | undefined => {
      const parts = key.split('.');
      let node: string | TranslationDictionary | undefined = translations[lang];

      for (const part of parts) {
        if (node && typeof node === 'object') {
          node = (node as TranslationDictionary)[part];
        } else {
          node = undefined;
          break;
        }
      }

      return node as string | TranslationDictionary | undefined;
    },
    []
  );

  const applyParams = useCallback((template: string, params?: TranslationParams) => {
    if (!params) {
      return template;
    }

    return template.replace(/\{\{(.*?)\}\}/g, (_, token) => {
      const value = params[token.trim()];
      return value !== undefined ? String(value) : `{{${token}}}`;
    });
  }, []);

  const translate = useCallback(
    (key: string, params?: TranslationParams) => {
      const raw = getTranslation(language, key) ?? getTranslation('en', key);
      if (typeof raw !== 'string') {
        return key;
      }

      return applyParams(raw, params);
    },
    [applyParams, getTranslation, language]
  );

  const translateForLanguage = useCallback(
    (code: LanguageCode, key: string, params?: TranslationParams) => {
      const raw = getTranslation(code, key) ?? getTranslation('en', key);
      if (typeof raw !== 'string') {
        return key;
      }
      return applyParams(raw, params);
    },
    [applyParams, getTranslation]
  );

  const value = useMemo<LocalizationContextValue>(
    () => ({
      language,
      setLanguage: persistLanguage,
      t: translate,
      availableLanguages,
      translateForLanguage,
    }),
    [language, persistLanguage, translate, translateForLanguage]
  );

  return (
    <LocalizationContext.Provider value={value}>
      {children}
    </LocalizationContext.Provider>
  );
}

export function useLocalization(): LocalizationContextValue {
  const context = useContext(LocalizationContext);
  if (!context) {
    throw new Error('useLocalization must be used within a LocalizationProvider');
  }
  return context;
}
